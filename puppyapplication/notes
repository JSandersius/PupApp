url for this video https://www.youtube.com/watch?v=_l1cwxBLhBY&feature=youtu.be

if we look at the finished app, we see that the landing is static, pretty
simple to build
the second page is looks a little bit more tricky
we're going to have to make an API call for this one, and have some changing components
so we'll be using state as well 

the final page has a form, so it looks like we're probably going to be using state on this one as well 
and the results are going to be from an API call 

first things first, get everything set up  
we'll use create-react-app to get our boilerplate 
we'll then use yarn to add our dependencies, AXIOS and React Router DOM 
next we'll add bootstrap to index.html file 

to begin we're going to import react from react --> in App.js 
	browser router as router and route
		both of these will come from the react router dom 

then setup router component --> in App.js 
then import the navbar, the footer and the wrapper components
	though footer and navabar compnents ae just for styling, so they're not too important 

And then import the three pages that we're going to be creating 
discover
about 
search 

Now, the compoents within the wrapper are going to be rendered depending on the path 
	This is where we'll use react router  

Ok, so settng this up is pretty easy, these components will only be set up if the path is EXACTLY matched
	if we were to leave out the exact property, the component will render at the path starting at the suggested path 

if you dont add a path, you can choose to render a component on no match whatsoever 
This give you the option to add a 404 page 
	 

Dont be too worried if this hasn't clicked yet, it will in a bit 

I'm now going to create component files and simply add an h1 tag, including the name of the component so I can check to make sure the react router is working properly 

_______
Ok so after much effort the react-router is properly working 
the webpage compiles and the three path work 

now we're going to build the navbar itself 
the main difference we're going to have in a react router is that we'er going to be using 
a link tag over a href
	the anchor tag reload the whole page, Link prevents that 
	link will change the page pathname without reloading the whole page 
	allowing us to take advantage of react ability to reload individual components

for further explanation on react router, google search "simple react router"
https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf	

building out the rest of the navbar is essentially the same as building out a regular navbar 
we're also going to be adding a conditional active class that is only going to be applies if the pathname matches

OK, lets get buildin out our pages. We'll start with the About page 
this will be very simple, there are no dynamic components on this page, it is very static so this components doesn't have to be a class 
we're also going to be adding a couple components here to keep the code clean  
this hero components is going to be used to hold the image, we're going to add some styling in the components file to keep the about page pretty clean 
likewise we're also goo be adding some additionlal components for simplicity 
the container , row and call components are very simple they will simply allow us to create divs with certain classes in a much shorter syntax throughout the page 
we can recyvle these components within out application and not just within the about page 

OK, lets move on to the Discover page, this page looks a lot more challenging so lets break it down 
when the page loads initially we see a card sitting in the middle of the page with a spinning circle
	whay does this mean? the card is loaded with a spinning circle and once tha API call is made and a dog has been found, the card will be updated 
	we can do this by taking advanage of the component LIFECYCLE
once the card component has been mounted, we'll make an API call to search for dogs, the component will be reloaded once we've got a response, 

lets start by setting the discover component as a class because we are using state

Ok what we did was created Discover components as simple as we could've  made it , we havent added the card component yet but that will come next 
right now, what we're doing is we've set the state and we're taking advantage of the states matchCount in order to render how many matches we've made so far 
we have none right now because it's not fuctional yet 

the card component consists of two main things, the image of the dog that we get from the API call and the buttons, 
the button click function itself and the API calls should be habdled in the parent component
so they will be taken care of in this discover component, however we will be passing down the image as a prop as well as giving permission for the child
component to access the handle button click function
for right now, we're going to define the function  and simply have it do a console.log to notify us that it is in fact working 
and we'll pass the two props to the card compoent that we will be creating next, the image for now can remain empty as we havent created the API call yet eighther
we must import these components as we go 

now when we create the card component we're going to create the spinning circle before the API call has been made, 
which will be replaced when the state has updated 
so we're going to use a conditional render , if there is no prop.image the spinning icon will take the place instead 

because the image property in state is an empty string, we'll be rendering the spinning
icon right away

next, lets create the two buttons 
we're going to create a new button called card button  
we'll add some css for this as well 

now for these two buttons, we'll be passing come styling, the on-click function that we got from the parent 
and we'll define the data value as pass or pick to differenciate the two
in the component itself, we'll assign the on-click function and we'll assign the data values as class names

//the jsx shortcut here means that the rest of the properties of this props object will be added to the button element 
//so in this case, all of the inline css will be applied as well as the date value 

now lets make the API call so that we can actually load images of the dogs 
the API call will be made in the discover component
but we're going to store tha API calls in a seperate folder 
we'll name the folder utils and the filename will be API .js 
of course, remember to import this as well 



